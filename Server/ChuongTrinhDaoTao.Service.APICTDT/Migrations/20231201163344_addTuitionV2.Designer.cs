// <auto-generated />
using System;
using ChuongTrinhDaoTao.Service.APICTDT.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChuongTrinhDaoTao.Service.APICTDT.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231201163344_addTuitionV2")]
    partial class addTuitionV2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChuongTrinhDaoTao.Service.APICTDT.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avt")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("ChuongTrinhDaoTao.Service.APICTDT.Models.BlockOfKnowledge", b =>
                {
                    b.Property<int>("BlockOfKnowledgeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlockOfKnowledgeId"));

                    b.Property<string>("BlockOfKnowledgeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BlockOfKnowledgeId");

                    b.ToTable("BlockOfKnowledge", (string)null);
                });

            modelBuilder.Entity("ChuongTrinhDaoTao.Service.APICTDT.Models.BlockOfKnowledge_Course", b =>
                {
                    b.Property<int>("BlockOfKnowledgeId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("MajorId")
                        .HasColumnType("int");

                    b.Property<int>("CohortId")
                        .HasColumnType("int");

                    b.HasKey("BlockOfKnowledgeId", "CourseId", "MajorId", "CohortId");

                    b.HasIndex("CourseId");

                    b.HasIndex("CohortId", "MajorId");

                    b.ToTable("BlockOfKnowledge_Course", (string)null);
                });

            modelBuilder.Entity("ChuongTrinhDaoTao.Service.APICTDT.Models.Cohort", b =>
                {
                    b.Property<int>("CohortId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CohortId"));

                    b.Property<string>("CohortDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CohortName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("EndDay")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDay")
                        .HasColumnType("datetime2");

                    b.HasKey("CohortId");

                    b.ToTable("Cohort", (string)null);
                });

            modelBuilder.Entity("ChuongTrinhDaoTao.Service.APICTDT.Models.Cohort_Major", b =>
                {
                    b.Property<int>("CohortId")
                        .HasColumnType("int");

                    b.Property<int>("MajorId")
                        .HasColumnType("int");

                    b.HasKey("CohortId", "MajorId");

                    b.HasIndex("MajorId");

                    b.ToTable("Cohort_Major", (string)null);
                });

            modelBuilder.Entity("ChuongTrinhDaoTao.Service.APICTDT.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<int>("CodeCredits")
                        .HasColumnType("int");

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CourseMaterials")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CourseId");

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("ChuongTrinhDaoTao.Service.APICTDT.Models.Faculty", b =>
                {
                    b.Property<string>("FacultyId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FacultyDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FacultyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("FacultyId");

                    b.ToTable("Faculty", (string)null);
                });

            modelBuilder.Entity("ChuongTrinhDaoTao.Service.APICTDT.Models.Major", b =>
                {
                    b.Property<int>("MajorId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MajorId"));

                    b.Property<string>("FacultyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MajorDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("MajorFounding")
                        .HasColumnType("datetime2");

                    b.Property<string>("MajorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MajorId");

                    b.HasIndex("FacultyId");

                    b.ToTable("Major", (string)null);
                });

            modelBuilder.Entity("ChuongTrinhDaoTao.Service.APICTDT.Models.Tuition", b =>
                {
                    b.Property<int>("TuitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TuitionId"));

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("TuitionDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TuitionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TuitionTypeId")
                        .HasColumnType("int");

                    b.HasKey("TuitionId");

                    b.HasIndex("TuitionTypeId");

                    b.ToTable("Tuition", (string)null);
                });

            modelBuilder.Entity("ChuongTrinhDaoTao.Service.APICTDT.Models.TuitionType", b =>
                {
                    b.Property<int>("TuitionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TuitionTypeId"));

                    b.Property<string>("TuitionTypename")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TuitionTypeId");

                    b.ToTable("TuitionType", (string)null);
                });

            modelBuilder.Entity("ChuongTrinhDaoTao.Service.APICTDT.Models.UserMajor", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("MajorId")
                        .HasColumnType("int");

                    b.Property<int>("CohortId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "MajorId");

                    b.HasIndex("CohortId");

                    b.HasIndex("MajorId");

                    b.ToTable("UserMajor", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("ChuongTrinhDaoTao.Service.APICTDT.Models.BlockOfKnowledge_Course", b =>
                {
                    b.HasOne("ChuongTrinhDaoTao.Service.APICTDT.Models.BlockOfKnowledge", "BlockOfKnowledge")
                        .WithMany("BlockCourses")
                        .HasForeignKey("BlockOfKnowledgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChuongTrinhDaoTao.Service.APICTDT.Models.Course", "Course")
                        .WithMany("CourseBlocks")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChuongTrinhDaoTao.Service.APICTDT.Models.Cohort_Major", "Cohort_Major")
                        .WithMany("BlockOfKnowledge_Courses")
                        .HasForeignKey("CohortId", "MajorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlockOfKnowledge");

                    b.Navigation("Cohort_Major");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("ChuongTrinhDaoTao.Service.APICTDT.Models.Cohort_Major", b =>
                {
                    b.HasOne("ChuongTrinhDaoTao.Service.APICTDT.Models.Cohort", "Cohort")
                        .WithMany("CohortMajors")
                        .HasForeignKey("CohortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChuongTrinhDaoTao.Service.APICTDT.Models.Major", "Major")
                        .WithMany("MajorCohorts")
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cohort");

                    b.Navigation("Major");
                });

            modelBuilder.Entity("ChuongTrinhDaoTao.Service.APICTDT.Models.Major", b =>
                {
                    b.HasOne("ChuongTrinhDaoTao.Service.APICTDT.Models.Faculty", "Faculty")
                        .WithMany("Majors")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("ChuongTrinhDaoTao.Service.APICTDT.Models.Tuition", b =>
                {
                    b.HasOne("ChuongTrinhDaoTao.Service.APICTDT.Models.TuitionType", "tuitionType")
                        .WithMany("Tuitions")
                        .HasForeignKey("TuitionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tuitionType");
                });

            modelBuilder.Entity("ChuongTrinhDaoTao.Service.APICTDT.Models.UserMajor", b =>
                {
                    b.HasOne("ChuongTrinhDaoTao.Service.APICTDT.Models.Cohort", "Cohort")
                        .WithMany("UserMajor")
                        .HasForeignKey("CohortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChuongTrinhDaoTao.Service.APICTDT.Models.Major", "Major")
                        .WithMany("MajorsUser")
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChuongTrinhDaoTao.Service.APICTDT.Data.ApplicationUser", "User")
                        .WithMany("UserMajors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cohort");

                    b.Navigation("Major");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ChuongTrinhDaoTao.Service.APICTDT.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ChuongTrinhDaoTao.Service.APICTDT.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChuongTrinhDaoTao.Service.APICTDT.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ChuongTrinhDaoTao.Service.APICTDT.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChuongTrinhDaoTao.Service.APICTDT.Data.ApplicationUser", b =>
                {
                    b.Navigation("UserMajors");
                });

            modelBuilder.Entity("ChuongTrinhDaoTao.Service.APICTDT.Models.BlockOfKnowledge", b =>
                {
                    b.Navigation("BlockCourses");
                });

            modelBuilder.Entity("ChuongTrinhDaoTao.Service.APICTDT.Models.Cohort", b =>
                {
                    b.Navigation("CohortMajors");

                    b.Navigation("UserMajor");
                });

            modelBuilder.Entity("ChuongTrinhDaoTao.Service.APICTDT.Models.Cohort_Major", b =>
                {
                    b.Navigation("BlockOfKnowledge_Courses");
                });

            modelBuilder.Entity("ChuongTrinhDaoTao.Service.APICTDT.Models.Course", b =>
                {
                    b.Navigation("CourseBlocks");
                });

            modelBuilder.Entity("ChuongTrinhDaoTao.Service.APICTDT.Models.Faculty", b =>
                {
                    b.Navigation("Majors");
                });

            modelBuilder.Entity("ChuongTrinhDaoTao.Service.APICTDT.Models.Major", b =>
                {
                    b.Navigation("MajorCohorts");

                    b.Navigation("MajorsUser");
                });

            modelBuilder.Entity("ChuongTrinhDaoTao.Service.APICTDT.Models.TuitionType", b =>
                {
                    b.Navigation("Tuitions");
                });
#pragma warning restore 612, 618
        }
    }
}
